// File generated from our OpenAPI spec by Stainless.

package com.knock.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.knock.api.core.BaseDeserializer
import com.knock.api.core.BaseSerializer
import com.knock.api.core.Enum
import com.knock.api.core.ExcludeMissing
import com.knock.api.core.JsonField
import com.knock.api.core.JsonMissing
import com.knock.api.core.JsonValue
import com.knock.api.core.NoAutoDetect
import com.knock.api.core.checkKnown
import com.knock.api.core.checkRequired
import com.knock.api.core.getOrThrow
import com.knock.api.core.immutableEmptyMap
import com.knock.api.core.toImmutable
import com.knock.api.errors.KnockInvalidDataException
import java.time.OffsetDateTime
import java.util.Objects
import java.util.Optional

/** Represents a single message that was generated by a workflow for a given channel. */
@NoAutoDetect
class MessageMarkAsInteractedResponse
@JsonCreator
private constructor(
    @JsonProperty("id") @ExcludeMissing private val id: JsonField<String> = JsonMissing.of(),
    @JsonProperty("__typename")
    @ExcludeMissing
    private val _typename: JsonField<String> = JsonMissing.of(),
    @JsonProperty("actors")
    @ExcludeMissing
    private val actors: JsonField<List<Actor>> = JsonMissing.of(),
    @JsonProperty("archived_at")
    @ExcludeMissing
    private val archivedAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonProperty("channel_id")
    @ExcludeMissing
    private val channelId: JsonField<String> = JsonMissing.of(),
    @JsonProperty("clicked_at")
    @ExcludeMissing
    private val clickedAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonProperty("data") @ExcludeMissing private val data: JsonField<Data> = JsonMissing.of(),
    @JsonProperty("engagement_statuses")
    @ExcludeMissing
    private val engagementStatuses: JsonField<List<EngagementStatus>> = JsonMissing.of(),
    @JsonProperty("inserted_at")
    @ExcludeMissing
    private val insertedAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonProperty("interacted_at")
    @ExcludeMissing
    private val interactedAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonProperty("link_clicked_at")
    @ExcludeMissing
    private val linkClickedAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonProperty("metadata")
    @ExcludeMissing
    private val metadata: JsonField<Metadata> = JsonMissing.of(),
    @JsonProperty("read_at")
    @ExcludeMissing
    private val readAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonProperty("recipient")
    @ExcludeMissing
    private val recipient: JsonField<Recipient> = JsonMissing.of(),
    @JsonProperty("scheduled_at")
    @ExcludeMissing
    private val scheduledAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonProperty("seen_at")
    @ExcludeMissing
    private val seenAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonProperty("source")
    @ExcludeMissing
    private val source: JsonField<Source> = JsonMissing.of(),
    @JsonProperty("status")
    @ExcludeMissing
    private val status: JsonField<Status> = JsonMissing.of(),
    @JsonProperty("tenant")
    @ExcludeMissing
    private val tenant: JsonField<String> = JsonMissing.of(),
    @JsonProperty("updated_at")
    @ExcludeMissing
    private val updatedAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonProperty("workflow")
    @ExcludeMissing
    private val workflow: JsonField<String> = JsonMissing.of(),
    @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
) {

    /** The message ID */
    fun id(): Optional<String> = Optional.ofNullable(id.getNullable("id"))

    fun _typename(): Optional<String> = Optional.ofNullable(_typename.getNullable("__typename"))

    /** A list of actor representations associated with the message (up to 10) */
    fun actors(): Optional<List<Actor>> = Optional.ofNullable(actors.getNullable("actors"))

    /** Timestamp when message was archived */
    fun archivedAt(): Optional<OffsetDateTime> =
        Optional.ofNullable(archivedAt.getNullable("archived_at"))

    /** Channel ID associated with the message */
    fun channelId(): Optional<String> = Optional.ofNullable(channelId.getNullable("channel_id"))

    /** Timestamp when message was clicked */
    fun clickedAt(): Optional<OffsetDateTime> =
        Optional.ofNullable(clickedAt.getNullable("clicked_at"))

    /** Additional message data */
    fun data(): Optional<Data> = Optional.ofNullable(data.getNullable("data"))

    /** List of engagement statuses */
    fun engagementStatuses(): Optional<List<EngagementStatus>> =
        Optional.ofNullable(engagementStatuses.getNullable("engagement_statuses"))

    /** Timestamp of creation */
    fun insertedAt(): Optional<OffsetDateTime> =
        Optional.ofNullable(insertedAt.getNullable("inserted_at"))

    /** Timestamp when message was interacted with */
    fun interactedAt(): Optional<OffsetDateTime> =
        Optional.ofNullable(interactedAt.getNullable("interacted_at"))

    /** Timestamp when a link in the message was clicked */
    fun linkClickedAt(): Optional<OffsetDateTime> =
        Optional.ofNullable(linkClickedAt.getNullable("link_clicked_at"))

    /** Message metadata */
    fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

    /** Timestamp when message was read */
    fun readAt(): Optional<OffsetDateTime> = Optional.ofNullable(readAt.getNullable("read_at"))

    /**
     * A reference to a recipient, either a user identifier (string) or an object reference (id,
     * collection).
     */
    fun recipient(): Optional<Recipient> = Optional.ofNullable(recipient.getNullable("recipient"))

    /** Timestamp when message was scheduled for */
    fun scheduledAt(): Optional<OffsetDateTime> =
        Optional.ofNullable(scheduledAt.getNullable("scheduled_at"))

    /** Timestamp when message was seen */
    fun seenAt(): Optional<OffsetDateTime> = Optional.ofNullable(seenAt.getNullable("seen_at"))

    /** Source information */
    fun source(): Optional<Source> = Optional.ofNullable(source.getNullable("source"))

    /** Message delivery status */
    fun status(): Optional<Status> = Optional.ofNullable(status.getNullable("status"))

    /** Tenant ID that the message belongs to */
    fun tenant(): Optional<String> = Optional.ofNullable(tenant.getNullable("tenant"))

    /** Timestamp of last update */
    fun updatedAt(): Optional<OffsetDateTime> =
        Optional.ofNullable(updatedAt.getNullable("updated_at"))

    /** Workflow key used to create the message */
    @Deprecated("deprecated")
    fun workflow(): Optional<String> = Optional.ofNullable(workflow.getNullable("workflow"))

    /** The message ID */
    @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

    @JsonProperty("__typename") @ExcludeMissing fun __typename(): JsonField<String> = _typename

    /** A list of actor representations associated with the message (up to 10) */
    @JsonProperty("actors") @ExcludeMissing fun _actors(): JsonField<List<Actor>> = actors

    /** Timestamp when message was archived */
    @JsonProperty("archived_at")
    @ExcludeMissing
    fun _archivedAt(): JsonField<OffsetDateTime> = archivedAt

    /** Channel ID associated with the message */
    @JsonProperty("channel_id") @ExcludeMissing fun _channelId(): JsonField<String> = channelId

    /** Timestamp when message was clicked */
    @JsonProperty("clicked_at")
    @ExcludeMissing
    fun _clickedAt(): JsonField<OffsetDateTime> = clickedAt

    /** Additional message data */
    @JsonProperty("data") @ExcludeMissing fun _data(): JsonField<Data> = data

    /** List of engagement statuses */
    @JsonProperty("engagement_statuses")
    @ExcludeMissing
    fun _engagementStatuses(): JsonField<List<EngagementStatus>> = engagementStatuses

    /** Timestamp of creation */
    @JsonProperty("inserted_at")
    @ExcludeMissing
    fun _insertedAt(): JsonField<OffsetDateTime> = insertedAt

    /** Timestamp when message was interacted with */
    @JsonProperty("interacted_at")
    @ExcludeMissing
    fun _interactedAt(): JsonField<OffsetDateTime> = interactedAt

    /** Timestamp when a link in the message was clicked */
    @JsonProperty("link_clicked_at")
    @ExcludeMissing
    fun _linkClickedAt(): JsonField<OffsetDateTime> = linkClickedAt

    /** Message metadata */
    @JsonProperty("metadata") @ExcludeMissing fun _metadata(): JsonField<Metadata> = metadata

    /** Timestamp when message was read */
    @JsonProperty("read_at") @ExcludeMissing fun _readAt(): JsonField<OffsetDateTime> = readAt

    /**
     * A reference to a recipient, either a user identifier (string) or an object reference (id,
     * collection).
     */
    @JsonProperty("recipient") @ExcludeMissing fun _recipient(): JsonField<Recipient> = recipient

    /** Timestamp when message was scheduled for */
    @JsonProperty("scheduled_at")
    @ExcludeMissing
    fun _scheduledAt(): JsonField<OffsetDateTime> = scheduledAt

    /** Timestamp when message was seen */
    @JsonProperty("seen_at") @ExcludeMissing fun _seenAt(): JsonField<OffsetDateTime> = seenAt

    /** Source information */
    @JsonProperty("source") @ExcludeMissing fun _source(): JsonField<Source> = source

    /** Message delivery status */
    @JsonProperty("status") @ExcludeMissing fun _status(): JsonField<Status> = status

    /** Tenant ID that the message belongs to */
    @JsonProperty("tenant") @ExcludeMissing fun _tenant(): JsonField<String> = tenant

    /** Timestamp of last update */
    @JsonProperty("updated_at")
    @ExcludeMissing
    fun _updatedAt(): JsonField<OffsetDateTime> = updatedAt

    /** Workflow key used to create the message */
    @Deprecated("deprecated")
    @JsonProperty("workflow")
    @ExcludeMissing
    fun _workflow(): JsonField<String> = workflow

    @JsonAnyGetter
    @ExcludeMissing
    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

    private var validated: Boolean = false

    fun validate(): MessageMarkAsInteractedResponse = apply {
        if (validated) {
            return@apply
        }

        id()
        _typename()
        actors().ifPresent { it.forEach { it.validate() } }
        archivedAt()
        channelId()
        clickedAt()
        data().ifPresent { it.validate() }
        engagementStatuses()
        insertedAt()
        interactedAt()
        linkClickedAt()
        metadata().ifPresent { it.validate() }
        readAt()
        recipient().ifPresent { it.validate() }
        scheduledAt()
        seenAt()
        source().ifPresent { it.validate() }
        status()
        tenant()
        updatedAt()
        workflow()
        validated = true
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of
         * [MessageMarkAsInteractedResponse].
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [MessageMarkAsInteractedResponse]. */
    class Builder internal constructor() {

        private var id: JsonField<String> = JsonMissing.of()
        private var _typename: JsonField<String> = JsonMissing.of()
        private var actors: JsonField<MutableList<Actor>>? = null
        private var archivedAt: JsonField<OffsetDateTime> = JsonMissing.of()
        private var channelId: JsonField<String> = JsonMissing.of()
        private var clickedAt: JsonField<OffsetDateTime> = JsonMissing.of()
        private var data: JsonField<Data> = JsonMissing.of()
        private var engagementStatuses: JsonField<MutableList<EngagementStatus>>? = null
        private var insertedAt: JsonField<OffsetDateTime> = JsonMissing.of()
        private var interactedAt: JsonField<OffsetDateTime> = JsonMissing.of()
        private var linkClickedAt: JsonField<OffsetDateTime> = JsonMissing.of()
        private var metadata: JsonField<Metadata> = JsonMissing.of()
        private var readAt: JsonField<OffsetDateTime> = JsonMissing.of()
        private var recipient: JsonField<Recipient> = JsonMissing.of()
        private var scheduledAt: JsonField<OffsetDateTime> = JsonMissing.of()
        private var seenAt: JsonField<OffsetDateTime> = JsonMissing.of()
        private var source: JsonField<Source> = JsonMissing.of()
        private var status: JsonField<Status> = JsonMissing.of()
        private var tenant: JsonField<String> = JsonMissing.of()
        private var updatedAt: JsonField<OffsetDateTime> = JsonMissing.of()
        private var workflow: JsonField<String> = JsonMissing.of()
        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

        @JvmSynthetic
        internal fun from(messageMarkAsInteractedResponse: MessageMarkAsInteractedResponse) =
            apply {
                id = messageMarkAsInteractedResponse.id
                _typename = messageMarkAsInteractedResponse._typename
                actors = messageMarkAsInteractedResponse.actors.map { it.toMutableList() }
                archivedAt = messageMarkAsInteractedResponse.archivedAt
                channelId = messageMarkAsInteractedResponse.channelId
                clickedAt = messageMarkAsInteractedResponse.clickedAt
                data = messageMarkAsInteractedResponse.data
                engagementStatuses =
                    messageMarkAsInteractedResponse.engagementStatuses.map { it.toMutableList() }
                insertedAt = messageMarkAsInteractedResponse.insertedAt
                interactedAt = messageMarkAsInteractedResponse.interactedAt
                linkClickedAt = messageMarkAsInteractedResponse.linkClickedAt
                metadata = messageMarkAsInteractedResponse.metadata
                readAt = messageMarkAsInteractedResponse.readAt
                recipient = messageMarkAsInteractedResponse.recipient
                scheduledAt = messageMarkAsInteractedResponse.scheduledAt
                seenAt = messageMarkAsInteractedResponse.seenAt
                source = messageMarkAsInteractedResponse.source
                status = messageMarkAsInteractedResponse.status
                tenant = messageMarkAsInteractedResponse.tenant
                updatedAt = messageMarkAsInteractedResponse.updatedAt
                workflow = messageMarkAsInteractedResponse.workflow
                additionalProperties =
                    messageMarkAsInteractedResponse.additionalProperties.toMutableMap()
            }

        /** The message ID */
        fun id(id: String) = id(JsonField.of(id))

        /** The message ID */
        fun id(id: JsonField<String>) = apply { this.id = id }

        fun _typename(_typename: String) = _typename(JsonField.of(_typename))

        fun _typename(_typename: JsonField<String>) = apply { this._typename = _typename }

        /** A list of actor representations associated with the message (up to 10) */
        fun actors(actors: List<Actor>) = actors(JsonField.of(actors))

        /** A list of actor representations associated with the message (up to 10) */
        fun actors(actors: JsonField<List<Actor>>) = apply {
            this.actors = actors.map { it.toMutableList() }
        }

        /** A list of actor representations associated with the message (up to 10) */
        fun addActor(actor: Actor) = apply {
            actors =
                (actors ?: JsonField.of(mutableListOf())).also {
                    checkKnown("actors", it).add(actor)
                }
        }

        /** A user identifier */
        fun addActor(string: String) = addActor(Actor.ofString(string))

        /** An object reference to a recipient */
        fun addActor(objectReference: Actor.ObjectReference) =
            addActor(Actor.ofObjectReference(objectReference))

        /** Timestamp when message was archived */
        fun archivedAt(archivedAt: OffsetDateTime?) = archivedAt(JsonField.ofNullable(archivedAt))

        /** Timestamp when message was archived */
        fun archivedAt(archivedAt: Optional<OffsetDateTime>) = archivedAt(archivedAt.orElse(null))

        /** Timestamp when message was archived */
        fun archivedAt(archivedAt: JsonField<OffsetDateTime>) = apply {
            this.archivedAt = archivedAt
        }

        /** Channel ID associated with the message */
        fun channelId(channelId: String) = channelId(JsonField.of(channelId))

        /** Channel ID associated with the message */
        fun channelId(channelId: JsonField<String>) = apply { this.channelId = channelId }

        /** Timestamp when message was clicked */
        fun clickedAt(clickedAt: OffsetDateTime?) = clickedAt(JsonField.ofNullable(clickedAt))

        /** Timestamp when message was clicked */
        fun clickedAt(clickedAt: Optional<OffsetDateTime>) = clickedAt(clickedAt.orElse(null))

        /** Timestamp when message was clicked */
        fun clickedAt(clickedAt: JsonField<OffsetDateTime>) = apply { this.clickedAt = clickedAt }

        /** Additional message data */
        fun data(data: Data?) = data(JsonField.ofNullable(data))

        /** Additional message data */
        fun data(data: Optional<Data>) = data(data.orElse(null))

        /** Additional message data */
        fun data(data: JsonField<Data>) = apply { this.data = data }

        /** List of engagement statuses */
        fun engagementStatuses(engagementStatuses: List<EngagementStatus>) =
            engagementStatuses(JsonField.of(engagementStatuses))

        /** List of engagement statuses */
        fun engagementStatuses(engagementStatuses: JsonField<List<EngagementStatus>>) = apply {
            this.engagementStatuses = engagementStatuses.map { it.toMutableList() }
        }

        /** List of engagement statuses */
        fun addEngagementStatus(engagementStatus: EngagementStatus) = apply {
            engagementStatuses =
                (engagementStatuses ?: JsonField.of(mutableListOf())).also {
                    checkKnown("engagementStatuses", it).add(engagementStatus)
                }
        }

        /** Timestamp of creation */
        fun insertedAt(insertedAt: OffsetDateTime) = insertedAt(JsonField.of(insertedAt))

        /** Timestamp of creation */
        fun insertedAt(insertedAt: JsonField<OffsetDateTime>) = apply {
            this.insertedAt = insertedAt
        }

        /** Timestamp when message was interacted with */
        fun interactedAt(interactedAt: OffsetDateTime?) =
            interactedAt(JsonField.ofNullable(interactedAt))

        /** Timestamp when message was interacted with */
        fun interactedAt(interactedAt: Optional<OffsetDateTime>) =
            interactedAt(interactedAt.orElse(null))

        /** Timestamp when message was interacted with */
        fun interactedAt(interactedAt: JsonField<OffsetDateTime>) = apply {
            this.interactedAt = interactedAt
        }

        /** Timestamp when a link in the message was clicked */
        fun linkClickedAt(linkClickedAt: OffsetDateTime?) =
            linkClickedAt(JsonField.ofNullable(linkClickedAt))

        /** Timestamp when a link in the message was clicked */
        fun linkClickedAt(linkClickedAt: Optional<OffsetDateTime>) =
            linkClickedAt(linkClickedAt.orElse(null))

        /** Timestamp when a link in the message was clicked */
        fun linkClickedAt(linkClickedAt: JsonField<OffsetDateTime>) = apply {
            this.linkClickedAt = linkClickedAt
        }

        /** Message metadata */
        fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

        /** Message metadata */
        fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

        /** Message metadata */
        fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

        /** Timestamp when message was read */
        fun readAt(readAt: OffsetDateTime?) = readAt(JsonField.ofNullable(readAt))

        /** Timestamp when message was read */
        fun readAt(readAt: Optional<OffsetDateTime>) = readAt(readAt.orElse(null))

        /** Timestamp when message was read */
        fun readAt(readAt: JsonField<OffsetDateTime>) = apply { this.readAt = readAt }

        /**
         * A reference to a recipient, either a user identifier (string) or an object reference (id,
         * collection).
         */
        fun recipient(recipient: Recipient) = recipient(JsonField.of(recipient))

        /**
         * A reference to a recipient, either a user identifier (string) or an object reference (id,
         * collection).
         */
        fun recipient(recipient: JsonField<Recipient>) = apply { this.recipient = recipient }

        /** A user identifier */
        fun recipient(string: String) = recipient(Recipient.ofString(string))

        /** An object reference to a recipient */
        fun recipient(objectReference: Recipient.ObjectReference) =
            recipient(Recipient.ofObjectReference(objectReference))

        /** Timestamp when message was scheduled for */
        fun scheduledAt(scheduledAt: OffsetDateTime?) =
            scheduledAt(JsonField.ofNullable(scheduledAt))

        /** Timestamp when message was scheduled for */
        fun scheduledAt(scheduledAt: Optional<OffsetDateTime>) =
            scheduledAt(scheduledAt.orElse(null))

        /** Timestamp when message was scheduled for */
        fun scheduledAt(scheduledAt: JsonField<OffsetDateTime>) = apply {
            this.scheduledAt = scheduledAt
        }

        /** Timestamp when message was seen */
        fun seenAt(seenAt: OffsetDateTime?) = seenAt(JsonField.ofNullable(seenAt))

        /** Timestamp when message was seen */
        fun seenAt(seenAt: Optional<OffsetDateTime>) = seenAt(seenAt.orElse(null))

        /** Timestamp when message was seen */
        fun seenAt(seenAt: JsonField<OffsetDateTime>) = apply { this.seenAt = seenAt }

        /** Source information */
        fun source(source: Source) = source(JsonField.of(source))

        /** Source information */
        fun source(source: JsonField<Source>) = apply { this.source = source }

        /** Message delivery status */
        fun status(status: Status) = status(JsonField.of(status))

        /** Message delivery status */
        fun status(status: JsonField<Status>) = apply { this.status = status }

        /** Tenant ID that the message belongs to */
        fun tenant(tenant: String?) = tenant(JsonField.ofNullable(tenant))

        /** Tenant ID that the message belongs to */
        fun tenant(tenant: Optional<String>) = tenant(tenant.orElse(null))

        /** Tenant ID that the message belongs to */
        fun tenant(tenant: JsonField<String>) = apply { this.tenant = tenant }

        /** Timestamp of last update */
        fun updatedAt(updatedAt: OffsetDateTime) = updatedAt(JsonField.of(updatedAt))

        /** Timestamp of last update */
        fun updatedAt(updatedAt: JsonField<OffsetDateTime>) = apply { this.updatedAt = updatedAt }

        /** Workflow key used to create the message */
        @Deprecated("deprecated")
        fun workflow(workflow: String?) = workflow(JsonField.ofNullable(workflow))

        /** Workflow key used to create the message */
        @Deprecated("deprecated")
        fun workflow(workflow: Optional<String>) = workflow(workflow.orElse(null))

        /** Workflow key used to create the message */
        @Deprecated("deprecated")
        fun workflow(workflow: JsonField<String>) = apply { this.workflow = workflow }

        fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.clear()
            putAllAdditionalProperties(additionalProperties)
        }

        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
            additionalProperties.put(key, value)
        }

        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.putAll(additionalProperties)
        }

        fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
            keys.forEach(::removeAdditionalProperty)
        }

        fun build(): MessageMarkAsInteractedResponse =
            MessageMarkAsInteractedResponse(
                id,
                _typename,
                (actors ?: JsonMissing.of()).map { it.toImmutable() },
                archivedAt,
                channelId,
                clickedAt,
                data,
                (engagementStatuses ?: JsonMissing.of()).map { it.toImmutable() },
                insertedAt,
                interactedAt,
                linkClickedAt,
                metadata,
                readAt,
                recipient,
                scheduledAt,
                seenAt,
                source,
                status,
                tenant,
                updatedAt,
                workflow,
                additionalProperties.toImmutable(),
            )
    }

    /**
     * A reference to a recipient, either a user identifier (string) or an object reference (id,
     * collection).
     */
    @JsonDeserialize(using = Actor.Deserializer::class)
    @JsonSerialize(using = Actor.Serializer::class)
    class Actor
    private constructor(
        private val string: String? = null,
        private val objectReference: ObjectReference? = null,
        private val _json: JsonValue? = null,
    ) {

        /** A user identifier */
        fun string(): Optional<String> = Optional.ofNullable(string)

        /** An object reference to a recipient */
        fun objectReference(): Optional<ObjectReference> = Optional.ofNullable(objectReference)

        fun isString(): Boolean = string != null

        fun isObjectReference(): Boolean = objectReference != null

        /** A user identifier */
        fun asString(): String = string.getOrThrow("string")

        /** An object reference to a recipient */
        fun asObjectReference(): ObjectReference = objectReference.getOrThrow("objectReference")

        fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

        fun <T> accept(visitor: Visitor<T>): T {
            return when {
                string != null -> visitor.visitString(string)
                objectReference != null -> visitor.visitObjectReference(objectReference)
                else -> visitor.unknown(_json)
            }
        }

        private var validated: Boolean = false

        fun validate(): Actor = apply {
            if (validated) {
                return@apply
            }

            accept(
                object : Visitor<Unit> {
                    override fun visitString(string: String) {}

                    override fun visitObjectReference(objectReference: ObjectReference) {
                        objectReference.validate()
                    }
                }
            )
            validated = true
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Actor && string == other.string && objectReference == other.objectReference /* spotless:on */
        }

        override fun hashCode(): Int = /* spotless:off */ Objects.hash(string, objectReference) /* spotless:on */

        override fun toString(): String =
            when {
                string != null -> "Actor{string=$string}"
                objectReference != null -> "Actor{objectReference=$objectReference}"
                _json != null -> "Actor{_unknown=$_json}"
                else -> throw IllegalStateException("Invalid Actor")
            }

        companion object {

            /** A user identifier */
            @JvmStatic fun ofString(string: String) = Actor(string = string)

            /** An object reference to a recipient */
            @JvmStatic
            fun ofObjectReference(objectReference: ObjectReference) =
                Actor(objectReference = objectReference)
        }

        /** An interface that defines how to map each variant of [Actor] to a value of type [T]. */
        interface Visitor<out T> {

            /** A user identifier */
            fun visitString(string: String): T

            /** An object reference to a recipient */
            fun visitObjectReference(objectReference: ObjectReference): T

            /**
             * Maps an unknown variant of [Actor] to a value of type [T].
             *
             * An instance of [Actor] can contain an unknown variant if it was deserialized from
             * data that doesn't match any known variant. For example, if the SDK is on an older
             * version than the API, then the API may respond with new variants that the SDK is
             * unaware of.
             *
             * @throws KnockInvalidDataException in the default implementation.
             */
            fun unknown(json: JsonValue?): T {
                throw KnockInvalidDataException("Unknown Actor: $json")
            }
        }

        internal class Deserializer : BaseDeserializer<Actor>(Actor::class) {

            override fun ObjectCodec.deserialize(node: JsonNode): Actor {
                val json = JsonValue.fromJsonNode(node)

                tryDeserialize(node, jacksonTypeRef<String>())?.let {
                    return Actor(string = it, _json = json)
                }
                tryDeserialize(node, jacksonTypeRef<ObjectReference>()) { it.validate() }
                    ?.let {
                        return Actor(objectReference = it, _json = json)
                    }

                return Actor(_json = json)
            }
        }

        internal class Serializer : BaseSerializer<Actor>(Actor::class) {

            override fun serialize(
                value: Actor,
                generator: JsonGenerator,
                provider: SerializerProvider,
            ) {
                when {
                    value.string != null -> generator.writeObject(value.string)
                    value.objectReference != null -> generator.writeObject(value.objectReference)
                    value._json != null -> generator.writeObject(value._json)
                    else -> throw IllegalStateException("Invalid Actor")
                }
            }
        }

        /** An object reference to a recipient */
        @NoAutoDetect
        class ObjectReference
        @JsonCreator
        private constructor(
            @JsonProperty("id")
            @ExcludeMissing
            private val id: JsonField<String> = JsonMissing.of(),
            @JsonProperty("collection")
            @ExcludeMissing
            private val collection: JsonField<String> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /** An object identifier */
            fun id(): String = id.getRequired("id")

            /** The collection the object belongs to */
            fun collection(): String = collection.getRequired("collection")

            /** An object identifier */
            @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

            /** The collection the object belongs to */
            @JsonProperty("collection")
            @ExcludeMissing
            fun _collection(): JsonField<String> = collection

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): ObjectReference = apply {
                if (validated) {
                    return@apply
                }

                id()
                collection()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [ObjectReference].
                 *
                 * The following fields are required:
                 * ```java
                 * .id()
                 * .collection()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [ObjectReference]. */
            class Builder internal constructor() {

                private var id: JsonField<String>? = null
                private var collection: JsonField<String>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(objectReference: ObjectReference) = apply {
                    id = objectReference.id
                    collection = objectReference.collection
                    additionalProperties = objectReference.additionalProperties.toMutableMap()
                }

                /** An object identifier */
                fun id(id: String) = id(JsonField.of(id))

                /** An object identifier */
                fun id(id: JsonField<String>) = apply { this.id = id }

                /** The collection the object belongs to */
                fun collection(collection: String) = collection(JsonField.of(collection))

                /** The collection the object belongs to */
                fun collection(collection: JsonField<String>) = apply {
                    this.collection = collection
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): ObjectReference =
                    ObjectReference(
                        checkRequired("id", id),
                        checkRequired("collection", collection),
                        additionalProperties.toImmutable(),
                    )
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is ObjectReference && id == other.id && collection == other.collection && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(id, collection, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "ObjectReference{id=$id, collection=$collection, additionalProperties=$additionalProperties}"
        }
    }

    /** Additional message data */
    @NoAutoDetect
    class Data
    @JsonCreator
    private constructor(
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
    ) {

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Data = apply {
            if (validated) {
                return@apply
            }

            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            /** Returns a mutable builder for constructing an instance of [Data]. */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Data]. */
        class Builder internal constructor() {

            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(data: Data) = apply {
                additionalProperties = data.additionalProperties.toMutableMap()
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Data = Data(additionalProperties.toImmutable())
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Data && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "Data{additionalProperties=$additionalProperties}"
    }

    class EngagementStatus @JsonCreator private constructor(private val value: JsonField<String>) :
        Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val SEEN = of("seen")

            @JvmField val READ = of("read")

            @JvmField val INTERACTED = of("interacted")

            @JvmField val LINK_CLICKED = of("link_clicked")

            @JvmField val ARCHIVED = of("archived")

            @JvmStatic fun of(value: String) = EngagementStatus(JsonField.of(value))
        }

        /** An enum containing [EngagementStatus]'s known values. */
        enum class Known {
            SEEN,
            READ,
            INTERACTED,
            LINK_CLICKED,
            ARCHIVED,
        }

        /**
         * An enum containing [EngagementStatus]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [EngagementStatus] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            SEEN,
            READ,
            INTERACTED,
            LINK_CLICKED,
            ARCHIVED,
            /**
             * An enum member indicating that [EngagementStatus] was instantiated with an unknown
             * value.
             */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                SEEN -> Value.SEEN
                READ -> Value.READ
                INTERACTED -> Value.INTERACTED
                LINK_CLICKED -> Value.LINK_CLICKED
                ARCHIVED -> Value.ARCHIVED
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws KnockInvalidDataException if this class instance's value is a not a known member.
         */
        fun known(): Known =
            when (this) {
                SEEN -> Known.SEEN
                READ -> Known.READ
                INTERACTED -> Known.INTERACTED
                LINK_CLICKED -> Known.LINK_CLICKED
                ARCHIVED -> Known.ARCHIVED
                else -> throw KnockInvalidDataException("Unknown EngagementStatus: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws KnockInvalidDataException if this class instance's value does not have the
         *   expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow { KnockInvalidDataException("Value is not a String") }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is EngagementStatus && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    /** Message metadata */
    @NoAutoDetect
    class Metadata
    @JsonCreator
    private constructor(
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
    ) {

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Metadata = apply {
            if (validated) {
                return@apply
            }

            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            /** Returns a mutable builder for constructing an instance of [Metadata]. */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Metadata]. */
        class Builder internal constructor() {

            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(metadata: Metadata) = apply {
                additionalProperties = metadata.additionalProperties.toMutableMap()
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Metadata = Metadata(additionalProperties.toImmutable())
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
    }

    /**
     * A reference to a recipient, either a user identifier (string) or an object reference (id,
     * collection).
     */
    @JsonDeserialize(using = Recipient.Deserializer::class)
    @JsonSerialize(using = Recipient.Serializer::class)
    class Recipient
    private constructor(
        private val string: String? = null,
        private val objectReference: ObjectReference? = null,
        private val _json: JsonValue? = null,
    ) {

        /** A user identifier */
        fun string(): Optional<String> = Optional.ofNullable(string)

        /** An object reference to a recipient */
        fun objectReference(): Optional<ObjectReference> = Optional.ofNullable(objectReference)

        fun isString(): Boolean = string != null

        fun isObjectReference(): Boolean = objectReference != null

        /** A user identifier */
        fun asString(): String = string.getOrThrow("string")

        /** An object reference to a recipient */
        fun asObjectReference(): ObjectReference = objectReference.getOrThrow("objectReference")

        fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

        fun <T> accept(visitor: Visitor<T>): T {
            return when {
                string != null -> visitor.visitString(string)
                objectReference != null -> visitor.visitObjectReference(objectReference)
                else -> visitor.unknown(_json)
            }
        }

        private var validated: Boolean = false

        fun validate(): Recipient = apply {
            if (validated) {
                return@apply
            }

            accept(
                object : Visitor<Unit> {
                    override fun visitString(string: String) {}

                    override fun visitObjectReference(objectReference: ObjectReference) {
                        objectReference.validate()
                    }
                }
            )
            validated = true
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Recipient && string == other.string && objectReference == other.objectReference /* spotless:on */
        }

        override fun hashCode(): Int = /* spotless:off */ Objects.hash(string, objectReference) /* spotless:on */

        override fun toString(): String =
            when {
                string != null -> "Recipient{string=$string}"
                objectReference != null -> "Recipient{objectReference=$objectReference}"
                _json != null -> "Recipient{_unknown=$_json}"
                else -> throw IllegalStateException("Invalid Recipient")
            }

        companion object {

            /** A user identifier */
            @JvmStatic fun ofString(string: String) = Recipient(string = string)

            /** An object reference to a recipient */
            @JvmStatic
            fun ofObjectReference(objectReference: ObjectReference) =
                Recipient(objectReference = objectReference)
        }

        /**
         * An interface that defines how to map each variant of [Recipient] to a value of type [T].
         */
        interface Visitor<out T> {

            /** A user identifier */
            fun visitString(string: String): T

            /** An object reference to a recipient */
            fun visitObjectReference(objectReference: ObjectReference): T

            /**
             * Maps an unknown variant of [Recipient] to a value of type [T].
             *
             * An instance of [Recipient] can contain an unknown variant if it was deserialized from
             * data that doesn't match any known variant. For example, if the SDK is on an older
             * version than the API, then the API may respond with new variants that the SDK is
             * unaware of.
             *
             * @throws KnockInvalidDataException in the default implementation.
             */
            fun unknown(json: JsonValue?): T {
                throw KnockInvalidDataException("Unknown Recipient: $json")
            }
        }

        internal class Deserializer : BaseDeserializer<Recipient>(Recipient::class) {

            override fun ObjectCodec.deserialize(node: JsonNode): Recipient {
                val json = JsonValue.fromJsonNode(node)

                tryDeserialize(node, jacksonTypeRef<String>())?.let {
                    return Recipient(string = it, _json = json)
                }
                tryDeserialize(node, jacksonTypeRef<ObjectReference>()) { it.validate() }
                    ?.let {
                        return Recipient(objectReference = it, _json = json)
                    }

                return Recipient(_json = json)
            }
        }

        internal class Serializer : BaseSerializer<Recipient>(Recipient::class) {

            override fun serialize(
                value: Recipient,
                generator: JsonGenerator,
                provider: SerializerProvider,
            ) {
                when {
                    value.string != null -> generator.writeObject(value.string)
                    value.objectReference != null -> generator.writeObject(value.objectReference)
                    value._json != null -> generator.writeObject(value._json)
                    else -> throw IllegalStateException("Invalid Recipient")
                }
            }
        }

        /** An object reference to a recipient */
        @NoAutoDetect
        class ObjectReference
        @JsonCreator
        private constructor(
            @JsonProperty("id")
            @ExcludeMissing
            private val id: JsonField<String> = JsonMissing.of(),
            @JsonProperty("collection")
            @ExcludeMissing
            private val collection: JsonField<String> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /** An object identifier */
            fun id(): String = id.getRequired("id")

            /** The collection the object belongs to */
            fun collection(): String = collection.getRequired("collection")

            /** An object identifier */
            @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

            /** The collection the object belongs to */
            @JsonProperty("collection")
            @ExcludeMissing
            fun _collection(): JsonField<String> = collection

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): ObjectReference = apply {
                if (validated) {
                    return@apply
                }

                id()
                collection()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [ObjectReference].
                 *
                 * The following fields are required:
                 * ```java
                 * .id()
                 * .collection()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [ObjectReference]. */
            class Builder internal constructor() {

                private var id: JsonField<String>? = null
                private var collection: JsonField<String>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(objectReference: ObjectReference) = apply {
                    id = objectReference.id
                    collection = objectReference.collection
                    additionalProperties = objectReference.additionalProperties.toMutableMap()
                }

                /** An object identifier */
                fun id(id: String) = id(JsonField.of(id))

                /** An object identifier */
                fun id(id: JsonField<String>) = apply { this.id = id }

                /** The collection the object belongs to */
                fun collection(collection: String) = collection(JsonField.of(collection))

                /** The collection the object belongs to */
                fun collection(collection: JsonField<String>) = apply {
                    this.collection = collection
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): ObjectReference =
                    ObjectReference(
                        checkRequired("id", id),
                        checkRequired("collection", collection),
                        additionalProperties.toImmutable(),
                    )
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is ObjectReference && id == other.id && collection == other.collection && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(id, collection, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "ObjectReference{id=$id, collection=$collection, additionalProperties=$additionalProperties}"
        }
    }

    /** Source information */
    @NoAutoDetect
    class Source
    @JsonCreator
    private constructor(
        @JsonProperty("__typename")
        @ExcludeMissing
        private val _typename: JsonField<String> = JsonMissing.of(),
        @JsonProperty("categories")
        @ExcludeMissing
        private val categories: JsonField<List<String>> = JsonMissing.of(),
        @JsonProperty("key") @ExcludeMissing private val key: JsonField<String> = JsonMissing.of(),
        @JsonProperty("version_id")
        @ExcludeMissing
        private val versionId: JsonField<String> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        fun _typename(): String = _typename.getRequired("__typename")

        /** The workflow categories */
        fun categories(): List<String> = categories.getRequired("categories")

        /** The workflow key */
        fun key(): String = key.getRequired("key")

        /** The source version ID */
        fun versionId(): String = versionId.getRequired("version_id")

        @JsonProperty("__typename") @ExcludeMissing fun __typename(): JsonField<String> = _typename

        /** The workflow categories */
        @JsonProperty("categories")
        @ExcludeMissing
        fun _categories(): JsonField<List<String>> = categories

        /** The workflow key */
        @JsonProperty("key") @ExcludeMissing fun _key(): JsonField<String> = key

        /** The source version ID */
        @JsonProperty("version_id") @ExcludeMissing fun _versionId(): JsonField<String> = versionId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Source = apply {
            if (validated) {
                return@apply
            }

            _typename()
            categories()
            key()
            versionId()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Source].
             *
             * The following fields are required:
             * ```java
             * ._typename()
             * .categories()
             * .key()
             * .versionId()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Source]. */
        class Builder internal constructor() {

            private var _typename: JsonField<String>? = null
            private var categories: JsonField<MutableList<String>>? = null
            private var key: JsonField<String>? = null
            private var versionId: JsonField<String>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(source: Source) = apply {
                _typename = source._typename
                categories = source.categories.map { it.toMutableList() }
                key = source.key
                versionId = source.versionId
                additionalProperties = source.additionalProperties.toMutableMap()
            }

            fun _typename(_typename: String) = _typename(JsonField.of(_typename))

            fun _typename(_typename: JsonField<String>) = apply { this._typename = _typename }

            /** The workflow categories */
            fun categories(categories: List<String>) = categories(JsonField.of(categories))

            /** The workflow categories */
            fun categories(categories: JsonField<List<String>>) = apply {
                this.categories = categories.map { it.toMutableList() }
            }

            /** The workflow categories */
            fun addCategory(category: String) = apply {
                categories =
                    (categories ?: JsonField.of(mutableListOf())).also {
                        checkKnown("categories", it).add(category)
                    }
            }

            /** The workflow key */
            fun key(key: String) = key(JsonField.of(key))

            /** The workflow key */
            fun key(key: JsonField<String>) = apply { this.key = key }

            /** The source version ID */
            fun versionId(versionId: String) = versionId(JsonField.of(versionId))

            /** The source version ID */
            fun versionId(versionId: JsonField<String>) = apply { this.versionId = versionId }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Source =
                Source(
                    checkRequired("_typename", _typename),
                    checkRequired("categories", categories).map { it.toImmutable() },
                    checkRequired("key", key),
                    checkRequired("versionId", versionId),
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Source && _typename == other._typename && categories == other.categories && key == other.key && versionId == other.versionId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(_typename, categories, key, versionId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Source{_typename=$_typename, categories=$categories, key=$key, versionId=$versionId, additionalProperties=$additionalProperties}"
    }

    /** Message delivery status */
    class Status @JsonCreator private constructor(private val value: JsonField<String>) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val QUEUED = of("queued")

            @JvmField val SENT = of("sent")

            @JvmField val DELIVERED = of("delivered")

            @JvmField val DELIVERY_ATTEMPTED = of("delivery_attempted")

            @JvmField val UNDELIVERED = of("undelivered")

            @JvmField val NOT_SENT = of("not_sent")

            @JvmField val BOUNCED = of("bounced")

            @JvmStatic fun of(value: String) = Status(JsonField.of(value))
        }

        /** An enum containing [Status]'s known values. */
        enum class Known {
            QUEUED,
            SENT,
            DELIVERED,
            DELIVERY_ATTEMPTED,
            UNDELIVERED,
            NOT_SENT,
            BOUNCED,
        }

        /**
         * An enum containing [Status]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [Status] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            QUEUED,
            SENT,
            DELIVERED,
            DELIVERY_ATTEMPTED,
            UNDELIVERED,
            NOT_SENT,
            BOUNCED,
            /** An enum member indicating that [Status] was instantiated with an unknown value. */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                QUEUED -> Value.QUEUED
                SENT -> Value.SENT
                DELIVERED -> Value.DELIVERED
                DELIVERY_ATTEMPTED -> Value.DELIVERY_ATTEMPTED
                UNDELIVERED -> Value.UNDELIVERED
                NOT_SENT -> Value.NOT_SENT
                BOUNCED -> Value.BOUNCED
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws KnockInvalidDataException if this class instance's value is a not a known member.
         */
        fun known(): Known =
            when (this) {
                QUEUED -> Known.QUEUED
                SENT -> Known.SENT
                DELIVERED -> Known.DELIVERED
                DELIVERY_ATTEMPTED -> Known.DELIVERY_ATTEMPTED
                UNDELIVERED -> Known.UNDELIVERED
                NOT_SENT -> Known.NOT_SENT
                BOUNCED -> Known.BOUNCED
                else -> throw KnockInvalidDataException("Unknown Status: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws KnockInvalidDataException if this class instance's value does not have the
         *   expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow { KnockInvalidDataException("Value is not a String") }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Status && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is MessageMarkAsInteractedResponse && id == other.id && _typename == other._typename && actors == other.actors && archivedAt == other.archivedAt && channelId == other.channelId && clickedAt == other.clickedAt && data == other.data && engagementStatuses == other.engagementStatuses && insertedAt == other.insertedAt && interactedAt == other.interactedAt && linkClickedAt == other.linkClickedAt && metadata == other.metadata && readAt == other.readAt && recipient == other.recipient && scheduledAt == other.scheduledAt && seenAt == other.seenAt && source == other.source && status == other.status && tenant == other.tenant && updatedAt == other.updatedAt && workflow == other.workflow && additionalProperties == other.additionalProperties /* spotless:on */
    }

    /* spotless:off */
    private val hashCode: Int by lazy { Objects.hash(id, _typename, actors, archivedAt, channelId, clickedAt, data, engagementStatuses, insertedAt, interactedAt, linkClickedAt, metadata, readAt, recipient, scheduledAt, seenAt, source, status, tenant, updatedAt, workflow, additionalProperties) }
    /* spotless:on */

    override fun hashCode(): Int = hashCode

    override fun toString() =
        "MessageMarkAsInteractedResponse{id=$id, _typename=$_typename, actors=$actors, archivedAt=$archivedAt, channelId=$channelId, clickedAt=$clickedAt, data=$data, engagementStatuses=$engagementStatuses, insertedAt=$insertedAt, interactedAt=$interactedAt, linkClickedAt=$linkClickedAt, metadata=$metadata, readAt=$readAt, recipient=$recipient, scheduledAt=$scheduledAt, seenAt=$seenAt, source=$source, status=$status, tenant=$tenant, updatedAt=$updatedAt, workflow=$workflow, additionalProperties=$additionalProperties}"
}
